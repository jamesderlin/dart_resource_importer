/// Generates sample `resource_importer` output for tests to compare against.
///
/// For testing, we want to be able to import and run the code generated by
/// `resource_importer`, but we can't do that dynamically.  We instead test its
/// generated code indirectly:
///
/// * Import and test a static (already-generated) copy of the expected
///   `resource_importer` output.
/// * Separately verify that the static copy is identical to the output
///   generated dynamically from `resource_importer`.
///
/// This script generates the static copy of the expected output.  It must be
/// re-run whenever the `resource_importer` output (or the test configuration)
/// changes.
library;

import 'package:file/local.dart';
import 'package:file/memory.dart';
import 'package:logging/logging.dart' as log;
import 'package:resource_importer/src/resource_importer.dart';

import 'test_common.dart';

void main() async {
  final logger = log.Logger.root
    ..level = log.Level.WARNING
    ..onRecord.listen(print);

  var fs = setUpMemoryFileSystem(
    yaml: allYaml,
    packageRootPath: '/',
    style: FileSystemStyle.posix,
  );

  await processYamlConfiguration(fs: fs);

  logger.level = log.Level.INFO;

  var generatedFile = fs.file(destinationPathPosix);
  var contents = generatedFile.readAsStringSync();

  const localFs = LocalFileSystem();

  var destinationFile = getTestFile('expected/test.resources.dart')
    ..parent.createSync()
    ..writeAsStringSync(contents);
  logger.info('Wrote ${localFs.path.relative(destinationFile.path)}');
}
